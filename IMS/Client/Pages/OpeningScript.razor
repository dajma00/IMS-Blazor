@page "/openingscript"
@page "/openingscript/{quoteid:int}"
@using System.Threading.Tasks;
@using IMS.Shared.Models;
@inject HttpClient httpclient;
@inject IMS.Shared.QuoteState quoteState;
@using System.Collections.Generic;
@inject NavigationManager nm;
@inject IModalDialogService ModalDialog



<h3>Opening Script for Quote id:@quoteState.QuoteId</h3>
@if (titles != null)
{

    <EditForm Model="quote" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />


        <p>
            Dear
            <InputSelect @bind-Value="currentTitle">
                @foreach (var item in titles)
                    {
                    <option value="@item.Id">@item.Title</option>

                    }
            </InputSelect>
        </p>
        <label>Client Name</label>
        <InputText id="name" @bind-Value="quote.ClientName"></InputText>
        <ValidationMessage For="@(() => quote.ClientName)" />
        <button type="submit">Submit</button>

    </EditForm>
    <button @onclick="SignUpBtn_Clicked" class="btn btn-primary">Sign Up Now</button>



}


@code {
    public TitlesTable[] titles;
    public IEnumerable<String> iTitles;
    string iTitles1, iTitles2, currentTitle;
    public Quote quote;
    public int titleid;
    [Parameter]
    public int QuoteID { get; set; }

    async void SignUpBtn_Clicked()
    {
        ModalDialogResult result = await ModalDialog.ShowDialogAsync<Test>("Sign Up For your free account");
        if (result.Success)
            ;// CreateNewUser(result.ReturnParameters.Get<string>("FirstName"), result.ReturnParameters.Get<string>("LastName"))
        }

    protected async override Task OnInitializedAsync()
    {
        //get data from titles table
        titles = await httpclient.GetFromJsonAsync<TitlesTable[]>("api/IMS");
        //get the relevant quote data
        if (quoteState.QuoteId != 0) //quote state 0 means, no selection of quote was made
        {
            quote = await httpclient.GetFromJsonAsync<Quote>("api/IMS/quote/" + quoteState.QuoteId.ToString());
            currentTitle = quote.TitleCode.ToString();
        }
        else //no quote number means user has clicked on this component without selecting
             //a quote before. So send the user to select a quote first.
        {
            nm.NavigateTo("openquote");
        }

        //iTitles = from items2 in titles select items2.Title;

        //currentTitle = (from items in titles
        //                where quote.TitleCode == items.Id
        //                select items.Title).FirstOrDefault();







    }
    protected async Task HandleValidSubmit(EditContext editContext)
    {

        var x = currentTitle;
        quote.TitleCode = int.Parse(x);
        var result = await httpclient.PostAsJsonAsync("api/IMS/PostSaveChanges", quote);


        Console.WriteLine("OnValidSubmit");
    }
    //public void onchange(ChangeEventArgs e)
    //{
    //    quote.TitleCode = int.Parse(e.Value.ToString());


    //}
}
